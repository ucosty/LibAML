def ext_opcode(opcode: int):
    return opcode | (0x5B << 8)


def lnot_opcode(opcode: int):
    return opcode | (0x92 << 8)


class_map = {
    "DefAlias": "Alias",
    "DefName": "Name",
    "DefScope": "Scope",
    "DefAcquire": "Acquire",
    "DefAdd": "Add",
    "DefAnd": "And",
    "DefBuffer": "Buffer",
    "DefConcat": "Concat",
    "DefConcatRes": "ConcatRes",
    "DefCondRefOf": "CondRefOf",
    "DefCopyObject": "CopyObject",
    "DefDecrement": "Decrement",
    "DefDerefOf": "DerefOf",
    "DefDivide": "Divide",
    "DefFindSetLeftBit": "FindSetLeftBit",
    "DefFindSetRightBit": "FindSetRightBit",
    "DefFromBCD": "FromBCD",
    "DefIncrement": "Increment",
    "DefIndex": "Index",
    "DefLAnd": "LAnd",
    "DefLEqual": "LEqual",
    "DefLGreater": "LGreater",
    "DefLGreaterEqual": "LGreaterEqual",
    "DefLLess": "LLess",
    "DefLLessEqual": "LLessEqual",
    "DefLNot": "LNot",
    "DefLNotEqual": "LNotEqual",
    "DefLoad": "Load",
    "DefLoadTable": "LoadTable",
    "DefLOr": "LOr",
    "DefMatch": "Match",
    "DefMid": "Mid",
    "DefMod": "Mod",
    "DefMultiply": "Multiply",
    "DefNAnd": "NAnd",
    "DefNOr": "NOr",
    "DefNot": "Not",
    "DefObjectType": "ObjectType",
    "DefOr": "Or",
    "DefPackage": "Package",
    "DefVarPackage": "VarPackage",
    "DefRefOf": "RefOf",
    "DefShiftLeft": "ShiftLeft",
    "DefShiftRight": "ShiftRight",
    "DefSizeOf": "SizeOf",
    "DefStore": "Store",
    "DefSubtract": "Subtract",
    "DefTimer": "Timer",
    "DefToBCD": "ToBCD",
    "DefToBuffer": "ToBuffer",
    "DefToDecimalString": "ToDecimalString",
    "DefToHexString": "ToHexString",
    "DefToInteger": "ToInteger",
    "DefToString": "ToString",
    "DefWait": "Wait",
    "DefXOr": "Xor",
    "DefBreak": "Break",
    "DefBreakPoint": "BreakPoint",
    "DefContinue": "Continue",
    "DefElse": "Else",
    "DefFatal": "Fatal",
    "DefIfElse": "IfElse",
    "DefNoop": "Noop",
    "DefNotify": "Notify",
    "DefRelease": "Release",
    "DefReset": "Reset",
    "DefReturn": "Return",
    "DefSignal": "Signal",
    "DefSleep": "Sleep",
    "DefStall": "Stall",
    "DefWhile": "While",
}


def get_class_name(term_name):
    return class_map[term_name]


opcode_map = {
    "termarg": "TermArg",
    "aliasop": "DefAlias",
    "nameop": "DefName",
    "scopeop": "DefScope",
    "bankfieldop": "DefBankField",
    "createbitfieldop": "DefCreateBitField",
    "createbytefieldop": "DefCreateByteField",
    "createdwordfieldop": "DefCreateDWordField",
    "createfieldop": "DefCreateField",
    "createqwordfieldop": "DefCreateQWordField",
    "createwordfieldop": "DefCreateWordField",
    "dataregionop": "DefDataRegion",
    "externalop": "DefExternal",
    "opregionop": "DefOpRegion",
    "powerresop": "DefPowerRes",
    "thermalzoneop": "DefThermalZone",
    "acquireop": "DefAcquire",
    "addop": "DefAdd",
    "andop": "DefAnd",
    "bufferop": "DefBuffer",
    "concatop": "DefConcat",
    "concatresop": "DefConcatRes",
    "condrefofop": "DefCondRefOf",
    "copyobjectop": "DefCopyObject",
    "decrementop": "DefDecrement",
    "derefofop": "DefDerefOf",
    "divideop": "DefDivide",
    "findsetleftbitop": "DefFindSetLeftBit",
    "findsetrightbitop": "DefFindSetRightBit",
    "frombcdop": "DefFromBCD",
    "incrementop": "DefIncrement",
    "indexop": "DefIndex",
    "landop": "DefLAnd",
    "lequalop": "DefLEqual",
    "lgreaterop": "DefLGreater",
    "lgreaterequalop": "DefLGreaterEqual",
    "llessop": "DefLLess",
    "llessequalop": "DefLLessEqual",
    "midop": "DefMid",
    "lnotop": "DefLNot",
    "lnotequalop": "DefLNotEqual",
    "loadop": "DefLoad",
    "loadtableop": "DefLoadTable",
    "lorop": "DefLOr",
    "matchop": "DefMatch",
    "modop": "DefMod",
    "multiplyop": "DefMultiply",
    "nandop": "DefNAnd",
    "norop": "DefNOr",
    "notop": "DefNot",
    "objecttypeop": "DefObjectType",
    "orop": "DefOr",
    "packageop": "DefPackage",
    "varpackageop": "DefVarPackage",
    "refofop": "DefRefOf",
    "shiftleftop": "DefShiftLeft",
    "shiftrightop": "DefShiftRight",
    "sizeofop": "DefSizeOf",
    "storeop": "DefStore",
    "subtractop": "DefSubtract",
    "timerop": "DefTimer",
    "tobcdop": "DefToBCD",
    "tobufferop": "DefToBuffer",
    "todecimalstringop": "DefToDecimalString",
    "tohexstringop": "DefToHexString",
    "tointegerop": "DefToInteger",
    "tostringop": "DefToString",
    "waitop": "DefWait",
    "xorop": "DefXOr",
    "methodinvocation": "MethodInvocation",
    "methodop": "DefMethod",
    "breakop": "DefBreak",
    "breakpointop": "DefBreakPoint",
    "continueop": "DefContinue",
    "fatalop": "DefFatal",
    "ifelseop": "DefIfElse",
    "noopop": "DefNoop",
    "notifyop": "DefNotify",
    "releaseop": "DefRelease",
    "resetop": "DefReset",
    "returnop": "DefReturn",
    "signalop": "DefSignal",
    "sleepop": "DefSleep",
    "stallop": "DefStall",
    "whileop": "DefWhile",
    "revisionop": "RevisionOp",
    "byteconst": "ByteConst",
    "wordconst": "WordConst",
    "dwordconst": "DWordConst",
    "qwordconst": "QWordConst",
    "string": "String",
    "zeroop": "ZeroOp",
    "oneop": "OneOp",
    "onesop": "OnesOp",
    "deviceop": "DefDevice",
    "dualnameprefix": "DualNamePrefix",
    "multinameprefix": "MultiNamePrefix",
    "local0op": "Local0Op",
    "local1op": "Local1Op",
    "local2op": "Local2Op",
    "local3op": "Local3Op",
    "local4op": "Local4Op",
    "local5op": "Local5Op",
    "local6op": "Local6Op",
    "local7op": "Local7Op",
    "arg0op": "Arg0Op",
    "arg1op": "Arg1Op",
    "arg2op": "Arg2Op",
    "arg3op": "Arg3Op",
    "arg4op": "Arg4Op",
    "arg5op": "Arg5Op",
    "arg6op": "Arg6Op",
    "elseop": "DefElse",
    "ifop": "DefIf",
}


def get_opcode(name: str):
    name_lower = name.lower()
    if name_lower in opcode_map:
        return opcode_map[name_lower]
    else:
        raise KeyError("Could not find opcode: {}".format(name_lower))
